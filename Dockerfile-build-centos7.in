FROM FROM_SUBST 
 
MAINTAINER H2o.ai <ops@h2o.ai>

ENV CUDA_HOME=/usr/local/cuda
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH_MORE=/usr/lib/gcc/ppc64le-redhat-linux/4.8.2/:/home/$USER/lib/:$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH:$LD_LIBRARY_PATH_MORE
ENV CUDADIR=/usr/local/cuda/include/
ENV OMP_NUM_THREADS=32
ENV MKL_NUM_THREADS=32
ENV HOME=/root
ENV VECLIB_MAXIMUM_THREADS=32
RUN \
    yum groupinstall -y "Development Tools"

RUN \
    yum install -y \
        ncurses-devel \
	zlib-devel \
	wget \
	bzip2 \
	openssl-devel \
	libcurl-devel && \
    wget https://repo.continuum.io/miniconda/Miniconda3-4.3.27-Linux-ARCH_SUBST.sh && \
    bash Miniconda3-4.3.27-Linux-ARCH_SUBST.sh -b -p /opt/h2oai/dai/python && \
    wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps-llvm/1.0-master-21/ARCH_SUBST-centos7/llvm.tar.bz2 && \
    tar xvf llvm.tar.bz2 && \
    cp -r llvm/* /opt/h2oai/dai/ && \
    rm -rf llvm*

ENV LLVM4=/opt/h2oai/dai
ENV PATH=/opt/h2oai/dai/python/bin:$PATH
ENV PATH=/usr/local/bin:$PATH
ENV PATH=$LLVM4/bin:$PATH
ENV LD_LIBRARY_PATH=$LLVM4/lib
COPY scripts/gcc_wrapper.sh /opt/h2oai/gcc_wrapper/gcc
COPY scripts/g++_wrapper.sh /opt/h2oai/gcc_wrapper/g++
COPY scripts/gcc_wrapper.sh /opt/h2oai/gcc_wrapper/ARCH_SUBST-conda_cos6-linux-gnu-gcc
ENV PATH=/opt/h2oai/gcc_wrapper:$PATH
RUN ln /usr/bin/ar $LLVM4/bin/ARCH_SUBST-conda_cos6-linux-gnu-ar

RUN yum install -y atlas-devel blas-devel && \
  ln /usr/lib64/libgfortran.so.3 /usr/lib64/libgfortran.so && \
  wget http://github.com/xianyi/OpenBLAS/archive/v0.2.20.tar.gz && \
  tar xvf v0.2.20.tar.gz && \
  rm v0.2.20.tar.gz && \
  cd OpenBLAS-0.2.20 && make CBLAS_ONLY=1 && make PREFIX=/usr/local install

ENV OPENBLAS_PREFIX=open
RUN yum install -y libstdc++ libc libgomp
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
COPY scripts/g++_wrapper.sh /opt/h2oai/gcc_wrapper/ARCH_SUBST-conda_cos6-linux-gnu-c++
RUN yum install -y which
WORKDIR $HOME
COPY requirements_buildonly.txt requirements_buildonly.txt
COPY requirements_runtime.txt requirements_runtime.txt
COPY requirements_runtime_demos.txt requirements_runtime_demos.txt

RUN yum install -y \
  libpng-devel \
  freetype-devel

ENV PATH=/usr/local/bin:$PATH
RUN \
    wget https://cmake.org/files/v3.10/cmake-3.10.1.tar.gz && \
    tar xvf cmake-3.10.1.tar.gz && \
    cd $HOME/cmake-3.10.1 && \
    ./configure && \
    make -j6 install && \
    cd $HOME && \
    rm -rf cmake-3*

# Install SWIG b/c yum has old versions
RUN \
    wget https://sourceforge.net/projects/swig/files/swig/swig-3.0.12/swig-3.0.12.tar.gz && \
    tar -zxvf swig-3.0.12.tar.gz && \
    cd swig-3.0.12 && \
    ./configure --prefix=/usr && \
    make -j 4 && \
    make install && \
    cd $HOME && \
    rm -rf swig-3*

# Symlinks for CMake/SWIG - it does not recognize Miniconda paths otherwise
RUN \
    mkdir -p /usr/lib64/ && \
    ln -s /opt/h2oai/dai/python/lib/*python* /usr/lib64/ && \
    mkdir -p /usr/include/python3.6m && \
    ln -s /opt/h2oai/dai/python/include/python3.6m/* /usr/include/python3.6m

RUN bash -c 'if [ `arch` = "ppc64le" ]; then \
	git clone https://github.com/apache/arrow.git && \
	cd $HOME/arrow/cpp && \
	git checkout tags/apache-arrow-0.8.0 && \
	yum install -y boost-devel && \
  	pip install numpy cython && \
	cmake -DARROW_CXXFLAGS="-lutil" -DARROW_PYTHON=on && make -j && make install && \
	cd $HOME/arrow/python && \
	ARROW_HOME=/usr/local python setup.py install && \
	yum install -y libjpeg-devel; \
	fi'

RUN bash -c 'if [ `arch` = "ppc64le" ]; then \
	wget https://pypi.python.org/packages/0f/57/25be1a4c2d487942c3ed360f6eee7f41c5b9196a09ca71c54d1a33c968d9/Pillow-5.0.0.tar.gz#md5=08094bc48aae6877c94f8db4b8ee8e52 && \
	tar xvf Pillow-5.0.0.tar.gz && \
	cd $HOME/Pillow-5.0.0 && \
	sed -i "s/'ppc64'/'ppc64le'/g" setup.py && \
	python3.6 setup.py install && \
	cd $HOME && \
	rm -rf Pillow-5.0.0*; \
	fi'

RUN pip install numpy
RUN pip install setuptools llvmlite==0.20.0 scikit-build scipy
RUN sed -i 's/cmake/# cmake/' requirements_buildonly.txt
RUN pip install -r requirements_buildonly.txt
RUN pip install -r requirements_runtime.txt
RUN pip install -r requirements_runtime_demos.txt

RUN yum install -y which

RUN chmod -R o+rwx /opt/h2oai/dai/python
RUN chmod -R o+rwx /root

WORKDIR $HOME

ENV GIT_AUTHOR_NAME="anonymous"
ENV GIT_AUTHOR_EMAIL="anonymous@h2o.ai"
ENV GIT_COMMITTER_NAME="anonymous"
ENV GIT_COMMITTER_EMAIL="anonymous@h2o.ai"
ENV EMAIL="anonymous@h2o.ai"
