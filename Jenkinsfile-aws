#!/usr/bin/groovy
// TOOD: rename to @Library('h2o-jenkins-pipeline-lib') _
@Library('test-shared-library') _

import ai.h2o.ci.Utils
def utilsLib = new Utils()

def commitMessage = ''
def h2o4gpuUtils = null

pipeline {
    agent none

    // Setup job options
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    environment {
        MAKE_OPTS = "-s CI=1" // -s: silent mode
        BUILD_TYPE = "nccl-cuda8"
    }

    parameters {
        string(name: 'VERSION', defaultValue:'latest', description: 'h2o4gpu build/VERSION.txt')
    }

    stages {
        /////////////////////////////////////////////////////////////////////
        //
        // -nccl-cuda8
        //
        /////////////////////////////////////////////////////////////////////
        // test on ec2 p32xlarge
        stage("Full Test Wheel from S3 & S3up on Linux -nccl-cuda8") {
            agent {
                label "ec2P32xlarge"
            }
            steps {
                // get the wheel from s3
                dumpInfo 'Get wheel'
                script {
                    buildInfo("h2o4gpu", h2o4gpuUtils.isRelease())
                    buildInfo.get().setVersion(utilsLib.getCommandOutput("cat build/VERSION.txt"))

                    def versionTag = params.VERSION //buildInfo.getVersion() // from build/VERSION.txt
                    def majorVersionTag = buildInfo.getMajorVersion()
                    def artifactId = "h2o4gpu"
                    if (isRelease()) {
                        bucket = "s3://h2o-release/h2o4gpu/releases/stable/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"
                        def localArtifact = "${artifactId}-${versionTag}${extratag}-runtime.tar.bz2"
                        sh '''
                        s3cmd get ${bucket}/${localArtifact}
                        cp ${localArtifact} src/interface_py/dist1/
                        '''
                    }
                    if (isBleedingEdge()) {
                        bucket = "s3://h2o-release/h2o4gpu/releases/bleeding-edge/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"
                        def nonLocalVersionTag = versionTag.split('\\+')[0]
                        def bleedingEdgeArtifact = "${artifactId}-${nonLocalVersionTag}${extratag}-runtime.tar.bz2"
                        sh '''
                        s3cmd get ${bucket}${bleedingEdgeArtifact}
                        cp ${bleedingEdgeArtifact} src/interface_py/dist1/
                        '''
                    }
                }
                dumpInfo 'Linux Test Info'
                // Get source code (should put tests into wheel, then wouldn't have to checkout)
                retryWithTimeout(200 /* seconds */, 3 /* retries */) {
                    checkout scm
                }
                script {
                    h2o4gpuUtils.runTests(buildInfo.get(), "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "-nccl-cuda8", "dist1", "dotest")
                }
                retryWithTimeout(500 /* seconds */, 5 /* retries */) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
                        script {
                            h2o4gpuUtils.publishToS3(buildInfo.get(), "-nccl-cuda8-ec2P32xlarge" , "dist1")
                        }
                    }
                }
            }
        }

    } // end over stages
    post {
        failure {
            node('linux') {
                script {
                          //  to: "mateusz@h2o.ai, jmckinney@h2o.ai",
                    emailext(
                            to: "magnus@h2o.ai",
                            subject: "BUILD FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: '''${JELLY_SCRIPT, template="html_gmail"}''',
                            attachLog: true,
                            compressLog: true,
                            recipientProviders: [
                                    [$class: 'DevelopersRecipientProvider'],
                            ]
                    )
                }
            }
        }
    }
}

