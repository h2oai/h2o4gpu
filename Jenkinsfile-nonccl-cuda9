#!/usr/bin/groovy
// TOOD: rename to @Library('h2o-jenkins-pipeline-lib') _
@Library('test-shared-library') _

import ai.h2o.ci.Utils
import static ai.h2o.ci.Utils.banner
def utilsLib = new Utils()
import ai.h2o.ci.BuildInfo

def commitMessage = ''
def h2o4gpuUtils = null

def dist = "dist3"
def BUILDTYPE = "nonccl-cuda9"
def cuda = "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"
def cudart = "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04"
def extratag = "-nonccl-cuda9"
def linuxwheel = "linux_whl3"
def testtype = "dotestfast_nonccl"
def labelbuild = "nvidia-docker && (mr-dl11 || mr-dl16 || mr-dl10)"
def labeltest = "gpu && nvidia-docker && (mr-dl11 || mr-dl16 || mr-dl10)"
def labelruntime = "nvidia-docker"
def dobenchmark = "0"
def doruntime = "1"

//################ BELOW IS COPY/PASTE of Jenkinsfile.utils2 (except stage names)

// Just Notes:
//def jobnums       = [0 , 1 , 2  , 3]
//def tags          = ["nccl" , "nonccl" , "nccl"  , "nonccl"]
//def cudatags      = ["cuda8", "cuda8"  , "cuda9" , "cuda9"]
//def dobuilds      = [1, 0, 0, 0]
//def dofulltests   = [1, 0, 0, 0]
//def dopytests     = [1, 0, 0, 0]
//def doruntimes    = [1, 1, 1, 1]
//def dockerimagesbuild    = ["nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"]
//def dockerimagesruntime  = ["nvidia/cuda:8.0-cudnn5-runtime-ubuntu16.04", "nvidia/cuda:8.0-cudnn5-runtime-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04"]
//def dists         = ["dist1","dist2","dist3","dist4"]

def benchmark_commit_trigger

pipeline {
    agent none

    // Setup job options
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    environment {
        MAKE_OPTS = "-s CI=1" // -s: silent mode
        BUILD_TYPE = "${BUILDTYPE}"
    }

    stages {
        /////////////////////////////////////////////////////////////////////
        //
        //
        //  Avoid mr-dl8 and mr-dl10 for build for now due to permission denied issue
        /////////////////////////////////////////////////////////////////////
        stage("Git clone on Linux nonccl-cuda9") {

            agent {
                label "${labelbuild}"
            }
            steps {
                dumpInfo 'Linux Build Info'
                // Do checkout
                retryWithTimeout(200 /* seconds */, 3 /* retries */) {
                    deleteDir()
                    checkout([
                            $class                           : 'GitSCM',
                            branches                         : scm.branches,
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : scm.extensions + [[$class: 'SubmoduleOption', disableSubmodules: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false, shallow: true]],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : scm.userRemoteConfigs])
                }
                script {
                    h2o4gpuUtils = load "Jenkinsfile.utils"
                    buildInfo("h2o4gpu", h2o4gpuUtils.isRelease())
                    commitMessage = sh(script: 'git log -1 --pretty=%B | tr "\n" " "', returnStdout: true).trim()
                    echo "Commit Message: ${commitMessage}"
                    benchmark_commit_trigger = ("${commitMessage}" ==~ /.*trigger_benchmark.*/)
                    echo "benchmark_commit_trigger: ${benchmark_commit_trigger}"
                }
                stash includes: "Jenkinsfile*", name: "jenkinsfiles"
            }
        }
        stage("Build Wheel on Linux nonccl-cuda9") {

            agent {
                label "${labelbuild}"
            }
            when {
                expression {
                    unstash "jenkinsfiles"
                    h2o4gpuUtils = load "Jenkinsfile.utils"
                    return h2o4gpuUtils.doBuild()
                }
            }
            steps {
                // Do checkout
                retryWithTimeout(200 /* seconds */, 3 /* retries */) {
                    deleteDir()
                    checkout([
                            $class                           : 'GitSCM',
                            branches                         : scm.branches,
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : scm.extensions + [[$class: 'SubmoduleOption', disableSubmodules: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false, shallow: true]],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : scm.userRemoteConfigs])
                }
                script {
                    h2o4gpuUtils = load "Jenkinsfile.utils"
                    h2o4gpuUtils.buildOnLinux("${cuda}", "${extratag}", "${dist}", "${linuxwheel}")

                    buildInfo("h2o4gpu", h2o4gpuUtils.isRelease())

                    script {
                        // Load the version file content
                        buildInfo.get().setVersion(utilsLib.getCommandOutput("cat build/VERSION.txt"))
                        utilsLib.setCurrentBuildName(buildInfo.get().getVersion())
                        utilsLib.appendBuildDescription("""|Authors: ${buildInfo.get().getAuthorNames().join(" ")}
                                |Git SHA: ${buildInfo.get().getGitSha().substring(0, 8)}
                                |""".stripMargin("|"))
                    }

                }
            }
        }

        stage("Fast Test Wheel & Pylint & S3up on Linux nonccl-cuda9") {
            agent {
                label "${labeltest}"
            }
            when {
                expression {
                    unstash "jenkinsfiles"
                    h2o4gpuUtils = load "Jenkinsfile.utils"
                    return h2o4gpuUtils.doTests() && (h2o4gpuUtils.rerun_disabled(commitMessage) || !h2o4gpuUtils.wasStageSuccessful("Fast Test Wheel & Pylint & S3up on Linux"))
                }
            }
            steps {
                dumpInfo 'Linux Test Info'
                // Get source code (should put tests into wheel, then wouldn't have to checkout)
                retryWithTimeout(200 /* seconds */, 3 /* retries */) {
                    checkout scm
                }
                script {
                    unstash 'version_info'
                    sh """
                        echo "Before Stashed wheel file:"
                        ls -l src/interface_py/${dist}/  || true
                        rm -rf src/interface_py/${dist}/ || true
                       """
                    unstash "${linuxwheel}"
                    sh """
                        echo "After Stashed wheel file:"
                        ls -l src/interface_py/${dist}/  || true
                       """
                    h2o4gpuUtils.runTests(buildInfo.get(), "${cuda}", "${extratag}", "${dist}", "${testtype}")
                }
                retryWithTimeout(500 /* seconds */, 5 /* retries */) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
                        script {
                            h2o4gpuUtils.publishToS3(buildInfo.get(), "${extratag}" , "${dist}")
                        }
                    }
                }
            }
        }
        stage("Build/Publish Runtime Docker nonccl-cuda9") {
            agent {
                label "${labelruntime}"
            }
            when {
                expression {
                    unstash "jenkinsfiles"
                    h2o4gpuUtils = load "Jenkinsfile.utils"
                    return "${doruntime}" == "1" && h2o4gpuUtils.doRuntime()
                }
            }
            steps {
                dumpInfo 'Linux Build Info'
                // Do checkout
                retryWithTimeout(200 /* seconds */, 3 /* retries */) {
                    deleteDir()
                    checkout([
                            $class                           : 'GitSCM',
                            branches                         : scm.branches,
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : scm.extensions + [[$class: 'SubmoduleOption', disableSubmodules: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false, shallow: true]],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : scm.userRemoteConfigs])
                }
                script {
                    sh """
                        echo "Before Stashed wheel file:"
                        ls -l src/interface_py/${dist}/  || true
                        rm -rf src/interface_py/${dist}/ || true
                       """
                    unstash "${linuxwheel}"
                    sh """
                        echo "After Stashed wheel file:"
                        ls -l src/interface_py/${dist}/  || true
                       """
                    unstash 'version_info'
                    sh 'echo "Stashed version file:" && ls -l build/'
                }
                script {
                    h2o4gpuUtils.buildRuntime(buildInfo.get(), "${cudart}", "${dist}", "${extratag}")
                }
                retryWithTimeout(1000 /* seconds */, 5 /* retries */) {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
                    script {
                        h2o4gpuUtils.publishRuntimeToS3(buildInfo.get(), "${extratag}")
                    }
                }
                }
            }
        }

        stage("Benchmarking nonccl-cuda9") {
            agent {
                label 'master'
            }
            when {
                expression {
                    unstash "jenkinsfiles"
                    h2o4gpuUtils = load "Jenkinsfile.utils"
                    echo "benchmark_commit_trigger: ${benchmark_commit_trigger}"
                    return ("${benchmark_commit_trigger}"=="true" || h2o4gpuUtils.doTriggerBenchmarksJob()) && "${dobenchmark}" == "1" && env.BRANCH_NAME == "master"
                }
            }
            steps {
                script {
                    utilsLib.appendBuildDescription("BENCH \u2713")
                }

                echo banner("Triggering downstream jobs h2o4gpu${extratag}-benchmark : RUNTIME_ID=${buildInfo.get().getVersion()}")
                build job: "/h2o4gpu${extratag}-benchmark", parameters: [[$class: 'StringParameterValue', name: 'RUNTIME_ID', value: buildInfo.get().getVersion()]], propagate: false, wait: false, quietPeriod: 60
            }
        }

    } // end over stages
    post {
        failure {
            node('linux') {
                script {
                    if(env.BRANCH_NAME == "master") {
                        emailext(
                                to: "mateusz@h2o.ai, jmckinney@h2o.ai",
                                subject: "BUILD FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                                body: '''${JELLY_SCRIPT, template="html_gmail"}''',
                                attachLog: true,
                                compressLog: true,
                                recipientProviders: [
                                        [$class: 'DevelopersRecipientProvider'],
                                ]
                            )
                    }
                }
            }
        }
    }
}


