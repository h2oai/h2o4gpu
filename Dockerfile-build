ARG docker_name

FROM $docker_name

MAINTAINER H2o.ai <ops@h2o.ai>

#
# Env variables for CUDA. Necessary because certain systems don't support nvidia-docker so we should use plain docker as much as possible.
#
ENV HOME=/root
ENV CUDA_HOME=/usr/local/cuda
ENV CUDADIR=/usr/local/cuda/include/
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH_CUDA=$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV LD_LIBRARY_PATH_BUILD=/lib64:/usr/local/lib64:/home/$USER/lib/
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH_CUDA:$LD_LIBRARY_PATH_BUILD:$LD_LIBRARY_PATH

#
# Env variables used by the codebase.
#
ENV OMP_NUM_THREADS=32
ENV MKL_NUM_THREADS=32
ENV VECLIB_MAXIMUM_THREADS=32
ENV AXEL_VERSION=2.17.11

# Disable the error "Unable to read consumer identity"
RUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/subscription-manager.conf

#
# Install necessary libraries and dependencies
#
RUN dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

RUN dnf update -y

# Enable RHSCL repository
# RUN dnf install -y 'dnf-command(config-manager)' && \
#     dnf config-manager --set-enabled powertools


# Setup gcc etc.
RUN dnf install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc

# Git & gcc requirements
RUN dnf install -y libcurl-devel zlib-devel wget make autoconf gettext gmp-devel mpfr-devel libmpc-devel


# since we are using devel version, dev tools hould already be installed
# RUN dnf install -y devtoolset-7

# Install git
RUN dnf install -y git

#H2O4GPU requirements
RUN dnf install -y \
    cmake \
    ncurses-devel \
    bzip2 \
    which \
    openssl-devel \
    libpng-devel \
    freetype-devel \
    zeromq-devel \
    openblas \
    libffi-devel

# Compile from source because ubi8 does not have axel
RUN \
    wget https://github.com/axel-download-accelerator/axel/releases/download/v${AXEL_VERSION}/axel-${AXEL_VERSION}.tar.gz && \
    tar xf axel-${AXEL_VERSION}.tar.gz && \
    cd axel-${AXEL_VERSION} && \
    ./configure --prefix=/usr && \
    make && \
    make install;

RUN mkdir -p /opt/h2oai/h2o4gpu

RUN wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-22/`arch`-centos7/llvm.tar.bz2 && \
    tar xvf llvm.tar.bz2 && \
    cp -r llvm/* /opt/h2oai/h2o4gpu/ && \
    rm -rf llvm*

ENV LLVM4=/opt/h2oai/h2o4gpu
ENV PATH=$LLVM4/bin:$PATH
ENV LD_LIBRARY_PATH=$LLVM4/lib:$LD_LIBRARY_PATH
ENV LLVM_CONFIG=$LLVM4/bin/llvm-config

#
# Library versions
#
ARG python_version
ENV MINICONDA_VERSION=23.3.1-0
ENV SWIG_VERSION=3.0.12

# conda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-py310_${MINICONDA_VERSION}-Linux-`arch`.sh && \
    bash Miniconda3-py310_${MINICONDA_VERSION}-Linux-`arch`.sh -b -p /opt/h2oai/h2o4gpu/python && \
    /opt/h2oai/h2o4gpu/python/bin/conda install -y python=${python_version} conda-build pip && \
    /opt/h2oai/h2o4gpu/python/bin/conda update conda-build


ENV PATH=/opt/h2oai/h2o4gpu/python/bin:$PATH
ENV PATH=/usr/local/bin:$PATH

#
# Symlinks
#

# AR for conda
RUN ln /usr/bin/ar $LLVM4/bin/`arch`-conda_cos6-linux-gnu-ar

# Symlinks for Python libs used by SWIG in CMake - it does not recognize Miniconda paths otherwise
RUN \
    mkdir -p /usr/lib64/ && \
    ln -sf /opt/h2oai/h2o4gpu/python/lib/libpython* /usr/lib64/ && \
    mkdir -p /usr/include/python${python_version}m && \
    ln -s /opt/h2oai/h2o4gpu/python/include/python${python_version}m/* /usr/include/python${python_version}m

# Yumming openblas puts some files in a not-so-standard locations
RUN ln -s /usr/include/openblas/* /usr/local/include/

# Symlinks for NVML
RUN \
    mkdir -p /usr/lib64/nvidia/ && \
    ln -s /usr/local/cuda-`nvcc --version | tail -n 1 | cut -f 5 -d' ' | cut -f 1 -d ','`/targets/`arch`-linux/lib/stubs/libnvidia-ml.so /usr/lib64/nvidia/libnvidia-ml.so

#
# Builds from source due to too old versions in yum
#
WORKDIR $HOME
RUN dnf install -y pcre-devel 
# SWIG
RUN \
    wget https://0xdata-public.s3.amazonaws.com/swig/swig-${SWIG_VERSION}.tar.gz && \
    tar -zxvf swig-${SWIG_VERSION}.tar.gz && \
    cd swig-${SWIG_VERSION} && \
    ./configure --prefix=/usr && \
    make -j $(nproc) && \
    make install && \
    cd $HOME && \
    rm -rf swig-3*

#
# PPC64 specific - certain libs/whl don't support PPC64LE
#

# Arrow
# Need to enable c99 manually https://github.com/numpy/numpy/issues/14147
RUN bash -c 'if [ `arch` = "ppc64le" ]; then \
	git clone https://github.com/apache/arrow.git && \
	cd $HOME/arrow/cpp && \
	git checkout tags/apache-arrow-0.17.1 && \
    yum install -y boost-devel && \
  	CFLAGS=-std=c99 pip install numpy==1.22.0 cython==3.0.8  scipy==1.10.0 && \
	cmake -DARROW_CXXFLAGS="-lutil" -DARROW_PYTHON=on && make -j && make install && \
	cd $HOME/arrow/python && \
	ARROW_HOME=/usr/local python setup.py install && \
	yum install -y libjpeg-devel;\
	fi'


#
# Install Python requirements
#
RUN echo ${python_version}

RUN pip install -U pip==23.0.1

RUN pip install Cython==3.0.8

RUN pip install numpy==1.22.0 scipy==1.10.0 setuptools==49.6.0

COPY src/interface_py/requirements_buildonly.txt requirements_buildonly.txt

RUN pip install -r requirements_buildonly.txt

RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

RUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true)

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en

# RUN dnf install -y --enablerepo=epel boost169-devel

RUN conda install -y conda-forge::icu conda-forge::python-devtools conda-forge::cuda-opencl-dev

# See https://github.com/Microsoft/LightGBM/wiki/Installation-Guide#with-gpu-support for details
# https://github.com/Microsoft/LightGBM/pull/929/files
# Could compile with these as well: -DBOOST_COMPUTE_USE_OFFLINE_CACHE=OFF -DBOOST_COMPUTE_THREAD_SAFE=ON
RUN \
    export CUDA_HOME=/usr/local/cuda/ && \
    wget https://s3.amazonaws.com/0xdata-public/boost/boost_1_72_0.tar.bz2  && \
    tar xjf boost_1_72_0.tar.bz2 && \
    cd boost_1_72_0 && \
    export PYTHONPATH=/opt/h2oai/h2o4gpu/python/ && \
    ./bootstrap.sh --prefix=/opt/boost/ --with-python=python3 && \
    export CPPFLAGS="-I/opt/h2oai/h2o4gpu/python/include/python${python_version}m/ -fPIC" && \
    export C_INCLUDE_PATH="/opt/h2oai/h2o4gpu/python/include/python${python_version}m/" ; export CPLUS_INCLUDE_PATH="/opt/h2oai/h2o4gpu/python/include/python${python_version}m/" && \
    ./b2 link=static -a -d0 install --prefix=/opt/boost/ --with=all -j 20 cxxflags="-fPIC -I /opt/h2oai/h2o4gpu/python/include/python${python_version}m/" && \
    cd /usr/include ; rm -rf boost ; ln -s /opt/boost/include/boost . && \
    cd /usr/lib64/ ; rm -rf libboost* ; cp -a /opt/boost/lib/* . && \
    cd / 

#	yum install -y boost boost-devel boost-system boost-filesystem boost-thread

ENV LD_LIBRARY_PATH=/opt/boost/lib/:$LD_LIBRARY_PATH

RUN chmod -R o+rwx /opt/h2oai/h2o4gpu/python
RUN chmod -R o+rwx /root
RUN yum install -y hdf5-devel
RUN bash -c 'if [ `arch` == "ppc64le" ]; then \
	yum install -y ocl-icd; \
    fi'

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/nvidia
ENV CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda

RUN git config --global --add safe.directory /root/repo

WORKDIR $HOME

ENV GIT_AUTHOR_NAME="anonymous"
ENV GIT_AUTHOR_EMAIL="anonymous@h2o.ai"
ENV GIT_COMMITTER_NAME="anonymous"
ENV GIT_COMMITTER_EMAIL="anonymous@h2o.ai"
ENV EMAIL="anonymous@h2o.ai"
